package tto

import (
	"regexp"
	"strings"
	"sync"
)

var predefineRegexp = regexp.MustCompilePOSIX("#\\!([^\\!-]+):([^#]+?)")
	var lineJoinRegexp  = regexp.MustCompile("\\s*\\\\(\\s+)")
var tplCommentRegexp = regexp.MustCompile("/\\*+(\\s*)#!(.+?)*/")

type TemplateKind int

const (
	// 普通模板
	KindNormal = TemplateKind(0)
	// 使用所有表生成模板
	KindTables = TemplateKind(1)
	// 按表前缀生成模板
	KindTablePrefix = TemplateKind(2)
)

type CodeTemplate struct {
	path      string
	template  string
	predefine map[string]string
	kind      TemplateKind
	mux       *sync.RWMutex
}

func NewTemplate(s string, path string, attach bool) *CodeTemplate {
	t := &CodeTemplate{path: path, mux: &sync.RWMutex{}}
	return t.resolve(t.attach(s, attach))
}

func (g *CodeTemplate) resolve(s string) *CodeTemplate {
	g.mux.Lock()
	g.predefine = make(map[string]string)
	for _, match := range predefineRegexp.FindAllStringSubmatch(s, -1) {
		g.predefine[match[1]] = match[2]
	}
	g.mux.Unlock()
	g.template = g.formatContent(s)
	// 识别类型
	switch g.predefine["kind"] {
	case "1", "tables":
		g.kind = KindTables
	case "2", "prefix":
		g.kind = KindTablePrefix
	default:
		g.kind = KindNormal
	}
	return g
}

// 返回模板内容
func (g *CodeTemplate) formatContent(s string) string {
	s = predefineRegexp.ReplaceAllString(s, "")
	s = lineJoinRegexp.ReplaceAllString(s, "")
	s = tplCommentRegexp.ReplaceAllString(s,"")
	// 去掉模板注释

	return s
}

func (g *CodeTemplate) Kind() TemplateKind {
	return g.kind
}

// 文件路径
func (g *CodeTemplate) FilePath() string {
	return g.path
}

// 获取模板内容
func (g *CodeTemplate) String() string {
	return g.template
}

// 获取预定义的参数
func (g *CodeTemplate) Predefine(key string) (string, bool) {
	g.mux.RLock()
	defer g.mux.RUnlock()
	n, ok := g.predefine[key]
	return n, ok
}

// attach: attach generator copyright at template file first line
func (g *CodeTemplate) attach(s string, attach bool) string {
	if attach {
		l := getLangByPath(g.path)
		if l == L_Python{
			return g.python(s)
		}
		if l == L_Dart{
			return g.dart(s)
		}
		if len(s) > 1 && s[0] != '/' {
			if l != L_Unknown{
				return g.copyright(s)
			}
		}
	}
	return s
}

func (g *CodeTemplate) baseContent()string{
	return `# 
# this file is auto generated by tto v` + BuildVersion + ` !
# if you want to modify this code,please read guide doc
# and modify code template later.
#
# please read user guide on https://github.com/ixre/tto
#`
}

func (g *CodeTemplate) python(s string) string {
	if strings.HasPrefix(s, "#") && !strings.HasPrefix(s, "#!") {
		return s
	}
	return g.baseContent() + s
}

func (g *CodeTemplate) copyright(s string) string {
	return  `/**
 * this file is auto generated by tto v` + BuildVersion + ` !
 * if you want to modify this code,please read guide doc
 * and modify code template later.
 *
 * please read user guide on https://github.com/ixre/tto
 *
 */
` + s
}

func (g *CodeTemplate) dart(s string) string {
	if strings.HasPrefix(s, "///"){
		return s
	}
	return strings.Replace(g.baseContent(),"#","///",-1) + s
}
